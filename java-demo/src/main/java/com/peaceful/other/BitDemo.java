package com.peaceful.other;

/**
 * Created by wangjun on 16/2/25.
 */
public class BitDemo {

    public static void main(String[] args) {
        // 1、左移( << )
        // 0000 0000 0000 0000 0000 0000 0000 0101 然后左移2位后，低位补0：//
        // 0000 0000 0000 0000 0000 0000 0001 0100 换算成10进制为20
        System.out.println(5 << 2);// 运行结果是20

        // 2、右移( >> ) 高位补符号位
        // 0000 0000 0000 0000 0000 0000 0000 0101 然后右移2位，高位补0：
        // 0000 0000 0000 0000 0000 0000 0000 0001
        System.out.println(5 >> 2);// 运行结果是1

        // 3、无符号右移( >>> ) 高位补0
        // 例如 -5换算成二进制后为：0101 取反加1为1011
        // 1111 1111 1111 1111 1111 1111 1111 1011
        // 我们分别对5进行右移3位、 -5进行右移3位和无符号右移3位：
        System.out.println(5 >> 3);// 结果是0
        System.out.println(-5 >> 3);// 结果是-1
        System.out.println(-5 >>> 3);// 结果是536870911

        // 4、位与( & )
        // 位与：第一个操作数的的第n位于第二个操作数的第n位如果都是1，那么结果的第n为也为1，否则为0
        System.out.println(5 & 3);// 结果为1
        System.out.println(4 & 1);// 结果为0

        // 5、位或( | )
        // 第一个操作数的的第n位于第二个操作数的第n位 只要有一个是1，那么结果的第n为也为1，否则为0
        System.out.println(5 | 3);// 结果为7

        // 6、位异或( ^ )
        // 第一个操作数的的第n位于第二个操作数的第n位 相反，那么结果的第n为也为1，否则为0
        System.out.println(5 ^ 3);//结果为6

        // 7、位非( ~ )
        // 操作数的第n位为1，那么结果的第n位为0，反之。
        System.out.println(~5);// 结果为-6

        // 在计算机中负数以原码的补码形式表达
        System.out.println(Integer.toBinaryString(-5));// 结果为-6

        // 例如
        //
        //假设有一个 int 类型的数，值为5，那么，我们知道它在计算机中表示为： （因为java中int 是4个字节，所以高位需要补0，占够32位）
        //00000000 00000000 00000000 00000101

        //想知道，-5在计算机中如何表示？
        //在计算机中，负数以原码的补码形式表达。
        //什么叫补码呢？这得从原码，反码说起。

        // 原码：一个正数，按照绝对值大小转换成的二进制数；一个负数按照绝对值大小转换成的二进制数，然后最高位补1，称为原码。
        // 比如 00000000 00000000 00000000 00000101 是 5的 原码；10000000 00000000 00000000 00000101 是 -5的 原码。 　

        // 反码：正数的反码与原码相同，负数的反码为对该数的原码除符号位外各位取反。
        // 取反操作指：原为1，得0；原为0，得1。（1变0; 0变1）
        // 比如：正数00000000 00000000 00000000 00000101 的反码还是 00000000 00000000 00000000 00000101 ；
        // 负数10000000 00000000 00000000 00000101每一位取反（除符号位），得11111111 11111111 11111111 11111010。
        // 称：10000000 00000000 00000000 00000101 和 11111111 11111111 11111111 11111010互为反码。 　

        // 补码：正数的补码与原码相同，负数的补码为对该数的原码除符号位外各位取反，然后在最后一位加1.
        //        比如：10000000 00000000 00000000 00000101 的反码是：11111111 11111111 11111111 11111010。
        // 那么，补码为：
        // 11111111 11111111 11111111 11111010 + 1 = 11111111 11111111 11111111 11111011
        //所以，-5 在计算机中表达为：11111111 11111111 11111111 11111011。转换为十六进制：0xFFFFFFFB。


        System.out.println(1 << 1);
    }
}
